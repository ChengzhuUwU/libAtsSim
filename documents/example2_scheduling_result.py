import math
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np
from matplotlib.font_manager import FontProperties

plt.rc('font',family='Times New Roman')

# plt.rcParams['xtick.labelsize'] = 16  # 设置字体大小
# plt.rcParams['xtick.labelweight'] = 'bold'  # 设置字体加粗

# Define colors for each job
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',
          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf',
          '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5',
          '#c49c94', '#f7b6d2', '#c7c7c7', '#dbdb8d', '#9edae5',
          '#ff5733', '#33ff57', '#3357ff', '#ff33a6', '#33fff1',
          '#ffae33', '#a833ff', '#33ffa8', '#ff3333',
          '#a8ff33', '#e833ff', '#33ffe8', '#ff8333', '#3383ff',
          '#ff33f1', '#a6ff33', '#ff33a8', '#33ff83', '#f1ff33']
# Function to visualize the scheduling results
def visualize_schedule(schedule):
    fig, ax = plt.subplots(figsize=(18, 9))
    ax.set_xlabel('Time (ms)')
    ax.set_ylabel('Processor')
    ax.set_yticks(range(2))
    ax.set_yticklabels([f'{["CPU", "GPU"][i]}' for i in range(2)])
    ax.grid(True)

    schedule_data = schedule[0: 2]

    legend_patches = [mpatches.Patch(color=colors[i % len(colors)], label=str(i)) for i in range(max(job for jobs in schedule_data for job, _, _, _, _ in jobs) + 1)]
    plt.legend(handles=legend_patches, loc='upper right', title='Job')
    for processor_id, processor_schedule in enumerate(schedule_data):
        for job, tid, buffer_idx, start_time, end_time in processor_schedule:
            duration = end_time - start_time
        
            bar = ax.broken_barh([(start_time, end_time - start_time + 0.015)], (processor_id - 0.4, 0.8), facecolors=colors[job % len(colors)])
            # ax.text(start_time + (end_time - start_time) / 2, processor_id, str(f'{tid}\n({job})\n({buffer_idx if buffer_idx != 4294967295 else "/"})'), ha='center', va='center', color='white' if duration > 1e-8 else 'red')
            ax.text(start_time + (end_time - start_time) / 2, processor_id, str(f'{job}\n({buffer_idx if buffer_idx != 4294967295 else "/"})'), ha='center', va='center', color='white' if duration > 1e-8 else 'red')
    
    
    if len(schedule) > 2:
        connection_data = schedule[2]
        for left_proc, left_tid, right_proc, right_tid, send_time, recv_time in connection_data:
            start_x = send_time
            end_x = recv_time
            start_y = left_proc + 0.42 if left_proc == 0 else left_proc - 0.42
            end_y = right_proc + 0.42 if right_proc == 0 else right_proc - 0.42
            
            ax.annotate(
                '',  # No text
                xy=(end_x, end_y),  # Arrow head position
                xytext=(start_x, start_y),  # Arrow tail position
                arrowprops=dict(
                    arrowstyle='->', 
                    color='red', 
                    lw=2
                )
            )
        connection_data = schedule[3]
        for left_proc, left_tid, right_proc, right_tid, send_time, recv_time in connection_data:
            start_x = send_time
            end_x = recv_time
            start_y = left_proc + 0.42 if left_proc == 0 else left_proc - 0.42
            end_y = right_proc + 0.42 if right_proc == 0 else right_proc - 0.42
            ax.annotate(
                '',  # No text
                xy=(end_x, end_y),  # Arrow head position
                xytext=(start_x, start_y),  # Arrow tail position
                arrowprops=dict(
                    arrowstyle='->', 
                    color='blue', 
                    lw=2
                )
            )
    plt.tight_layout()
    
# article_colors = [
#     '#e7e6e6', '#e56b6f', '#006400', '#540d6e', '#DDDE76',  # 4
#     '#DB6387', '#BFAD86', '#F5BE33', '#014f86', '#ff7900',  # 9
#     '#004e98', '#0582ca', # 11
#     '#b388eb', '#3bceac', 
#     '#87bba2', '#b5e2fa',  # Stretch # 15
#     '#fce5d5', '#e1afa9',  # 17
#     '#fe938c', '#bdb2ff', '#ffcad4', '#0a9396', 
#     '#fec89a', '#d88c9a', # Collison
#     '#5e548e', '#3a5a40',  # 25
# ]
article_colors = [
    # '#e7e6e6', '#e56b6f', '#006400', '#540d6e', '#DDDE76',  # 4
    # '#DB6387', '#BFAD86', '#F5BE33', '#014f86', '#ff7900',  # 9
    # '#004e98', '#0582ca', # 11
    # '#b388eb', '#3bceac', 
    # '#87bba2', '#b5e2fa',  # Stretch # 15
    '#e7e6e6', '#e8e5e6', '#fff2ca', '#fff2ca', '#ffe0e1',  # 4
    '#ffe0e1', '#f3e1ff', '#f3e1ff', '#e8e5e6', '#e8e5e6',  # 9
    '#defffe', '#defffe', # 11
    '#f0ffd7', '#e7e5e7', 
    '#dff0d6', '#ddebf8',  # Stretch # 15
    '#fce5d5', '#e1afa9',  # 17
    '#fe938c', '#bdb2ff', '#ffcad4', '#0a9396', 
    '#fec89a', '#d88c9a', # Collison
    '#5e548e', '#3a5a40',  # 25
]
xpbd_task_name_map = {
    0:"Misc.",
    14:"Stretching",
    15:"Bending",
    16:"Obs-Collision",
    17:"Self-Collision",
}
xpbd_tet_task_name_map = {
    0:"Misc.",
    14:"Stress 1",
    15:"Stress 2",
    16:"Stress 3",
    17:"Stress 4",
    18:"Stress 5",
    19:"Stress 6",
    20:"Stress 7",
    21:"Stress 8",
    22:"Obs-Collision",
    23:"Self-Collision",
}
vbd_task_name_map = {
    0:"Misc.",
    14:"Block 0",
    15:"Block 1",
    16:"Block 2",
    17:"Block 3",
    18:"Block 4",
    19:"Block 5",
    20:"Block 6",
    21:"Block 7",
    22:"Block 8",
    23:"Block 9",
    24:"Block 10",
    25:"Block 11",
    26:"Block 12",
    27:"Block 13",
}

def hex_to_rgb(hex_color):
    # Remove '#' symbol if present
    hex_color = hex_color.lstrip('#')
    # Convert hex to RGB
    r = int(hex_color[0:2], 16)
    g = int(hex_color[2:4], 16)
    b = int(hex_color[4:6], 16)
    fr = r / 256.0
    fg = g / 256.0
    fb = b / 256.0
    print(f"[{fr:.4f}, {fg:.4f}, {fb:.4f}], ")
    return np.array([fr, fg, fb])

def map_orig_idx_to_arcle(func_id):
    print()

def visualize_schedule3(schedule, name_map, with_text = False, figure_name = ""):

    device_count = 2
    block_to_space_scale = 0.65

    schedule_data = schedule[0: device_count]
    # device_labels = ["CPU", "GPU"]
    device_labels = ["", ""]
    device_spacing = 0.4 / device_count

    end_time = max(end_time for processor_schedule in schedule_data for _, _, _, _, end_time in processor_schedule) + 0.1
    
    bold_font = FontProperties(weight='bold', size=14)
    # fig, ax = plt.subplots(figsize=(18, 3.5))
    fig, ax = plt.subplots(figsize=(18, 3.5))
    # ax.set_xlabel('Time (ms)')
    ax.set_xlim(0, max(end_time for processor_schedule in schedule_data for _, _, _, _, end_time in processor_schedule) + 0.1)
    # ax.set_title("Heterogeneous Task Scheduling Visualization")
    ax.tick_params(axis='x')  
    for label in ax.get_xticklabels():
        label.set_fontproperties(bold_font)

    ax.spines['top'].set_visible(False)   
    ax.spines['right'].set_visible(False) 
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)  

    # ax.set_ylabel('Processor')
    # ax.set_yticks(range(2))
    # ax.set_yticklabels([f'{["CPU", "GPU"][i]}' for i in range(2)])
    yticks = [i * device_spacing for i in range(len(device_labels))]  # 根据缩放后的值计算刻度位置
    ax.set_yticks(yticks)  # 设置 y 轴刻度
    ax.set_yticklabels(device_labels)  # 设置 y 轴标签
    ax.grid(True, linestyle='--', alpha=0.9)

    

    # Create a legend for job numbers
    id_set = set()
    for processor_id, processor_schedule in enumerate(schedule_data):
        for job, tid, buffer_idx, start_time, end_time in processor_schedule:
            id_set.add(job)
    # legend_patches = [mpatches.Patch(color=colors[i % len(colors)], label=str(i)) for i in range(max(job for jobs in schedule_data for job, _, _, _, _ in jobs) + 1)]
    legend_patches = [
        mpatches.Patch(color=article_colors[i % len(article_colors)], label=name_map[i] if (i >= 14) or i == 0 else f"{i}")
            for i in id_set
    ]
    bold_font = FontProperties(weight='bold', size=16)
    plt.legend(
        handles=legend_patches,
        loc='upper center',
        bbox_to_anchor=(0.5, -0.05),  # 放置在图形下方
        ncol=math.ceil(len(id_set)/2),
        frameon=False,
        columnspacing = 0.5,
        prop={
            'size':16,
            'weight':'bold',
        }
    )
    
    for processor_id, processor_schedule in enumerate(schedule_data):
        y_base = processor_id * device_spacing 
        for job, tid, buffer_idx, start_time, end_time in processor_schedule:
            duration = end_time - start_time
            color = article_colors[job % len(article_colors)]
            # smoother = -0.01 if processor_id == 0 else 0
            smoother = 0.0 if processor_id == 0 else 0
            ax.broken_barh(
                # [(start_time, end_time - start_time + 0.04)], 
                [(start_time, end_time - start_time + smoother)], 
                (y_base, device_spacing * block_to_space_scale),  # 高度缩放到设备区间
                facecolors=color,
                # edgecolor='black'
            )
            # bar = ax.broken_barh([(start_time, end_time - start_time + 0.04)], (processor_id / 3.6, 0.2), facecolors=color)
            if with_text:
                ax.text(
                    start_time + (end_time - start_time) / 2, 
                    y_base + (device_spacing * block_to_space_scale) / 2, 
                    str(f'{f"Block {job - 14}" if job >= 14 else "/"}\n({f"Buffer {buffer_idx}" if buffer_idx != 4294967295 else "/"})'), 
                    # str(f'{tid}\n({job})\n({buffer_idx if buffer_idx != 4294967295 else "/"})'), 
                    ha='center', va='center', color='black' if duration > 1e-8 else 'red')
    
    if len(schedule) > 2:
        connection_data = schedule[2]
        for left_proc, left_tid, right_proc, right_tid, send_time, recv_time in connection_data:
            # array_offset = 0.02
            array_offset = 0.0
            start_x = send_time - array_offset
            end_x = recv_time + array_offset

            # y_base = processor_id * device_spacing 
            delta = device_spacing * block_to_space_scale
            start_y = delta - 0.00 if left_proc == 0  else left_proc * device_spacing  + 0.00
            end_y   = delta - 0.00 if right_proc == 0 else right_proc * device_spacing + 0.00
            ax.annotate(
                '',  # No text
                xy=(end_x, end_y),  # Arrow head position
                xytext=(start_x, start_y),  # Arrow tail position
                arrowprops=dict(
                    arrowstyle='->', 
                    color='crimson' if left_proc == 0 else 'green', 
                    connectionstyle='arc3',
                    # shrink=0.05
                    lw=1.5
                )
            )

    if len(schedule) > 3:
        connection_data = schedule[3]
        for left_proc, left_tid, right_proc, right_tid, send_time, recv_time in connection_data:
            start_x = send_time - 0.01
            # end_x = send_time + 0.03
            end_x = recv_time + 0.01
            delta = device_spacing * 0.65
            start_y = delta if left_proc == 0 else  left_proc * device_spacing  
            end_y   = delta if right_proc == 0 else right_proc * device_spacing 

            ax.annotate(
                '',  # No text
                xy=(end_x, end_y),  # Arrow head position
                xytext=(start_x, start_y),  # Arrow tail position
                arrowprops=dict(
                    arrowstyle='->', 
                    color='blue', 
                    lw=2
                )
            )

    plt.tight_layout()
    
    if figure_name != "":
        # plt.savefig(f"documents/{figure_name}.svg", format="svg", dpi=300, bbox_inches="tight") // Save as .svg
        plt.savefig(f"documents/{figure_name}.png", format="png", dpi=300, bbox_inches="tight")


#
# Paste the scheduling result from 
#


# visualize_schedule3([ # VBD 8 iters (in our paper)
#     [(0, 98, 4294967295, 0.000, 0.000), (9, 92, 4294967295, 0.002, 0.006), (1, 0, 4294967295, 0.008, 0.065), (3, 93, 4294967295, 0.159, 0.171), (4, 88, 4294967295, 0.200, 0.436), (5, 94, 4294967295, 0.438, 0.468), (7, 95, 4294967295, 0.470, 1.739), (20, 9, 1, 3.025, 5.938), (23, 12, 0, 5.940, 6.316), (19, 18, 2, 6.318, 9.483), (23, 22, 0, 9.485, 9.861), (19, 28, 5, 9.863, 13.028), (23, 32, 0, 13.030, 13.406), (18, 37, 6, 13.408, 16.699), (23, 42, 0, 16.701, 17.077), (18, 47, 8, 17.079, 20.370), (23, 52, 0, 20.372, 20.748), (18, 57, 10, 20.750, 24.041), (23, 62, 0, 24.043, 24.419), (18, 67, 12, 24.421, 27.712), (23, 72, 0, 27.714, 28.090), (18, 77, 14, 28.092, 31.383), (23, 82, 0, 31.385, 31.761), (0, 99, 4294967295, 32.809, 32.809)],
#     [(0, 85, 4294967295, 0.000, 0.014), (8, 86, 4294967295, 0.024, 0.034), (2, 87, 4294967295, 0.044, 0.055), (0, 2, 4294967295, 0.285, 0.311), (6, 89, 4294967295, 0.656, 2.129), (10, 90, 4294967295, 2.139, 2.636), (11, 96, 4294967295, 2.646, 2.713), (0, 91, 4294967295, 2.723, 2.804), (0, 97, 4294967295, 2.814, 2.851), (0, 1, 4294967295, 2.861, 2.880), (14, 3, 0, 2.890, 3.435), (15, 4, 0, 3.445, 3.956), (16, 5, 0, 3.966, 4.499), (17, 6, 0, 4.509, 5.012), (18, 7, 0, 5.022, 5.525), (19, 8, 2, 5.535, 6.035), (21, 10, 3, 6.045, 6.414), (22, 11, 1, 6.424, 6.644), (14, 13, 0, 6.654, 7.198), (15, 14, 0, 7.208, 7.720), (16, 15, 0, 7.730, 8.263), (17, 16, 0, 8.273, 8.776), (18, 17, 0, 8.786, 9.289), (20, 19, 4, 9.299, 9.761), (21, 20, 2, 9.771, 10.141), (22, 21, 0, 10.151, 10.371), (14, 23, 0, 10.381, 10.925), (15, 24, 0, 10.935, 11.447), (16, 25, 0, 11.457, 11.990), (17, 26, 0, 12.000, 12.502), (18, 27, 6, 12.512, 13.015), (20, 29, 7, 13.025, 13.488), (21, 30, 5, 13.498, 13.867), (22, 31, 0, 13.877, 14.097), (14, 33, 0, 14.107, 14.651), (15, 34, 0, 14.661, 15.173), (16, 35, 0, 15.183, 15.716), (17, 36, 0, 15.726, 16.229), (19, 38, 8, 16.239, 16.739), (20, 39, 9, 16.749, 17.211), (21, 40, 6, 17.221, 17.590), (22, 41, 0, 17.600, 17.821), (14, 43, 0, 17.831, 18.375), (15, 44, 0, 18.385, 18.896), (16, 45, 0, 18.906, 19.440), (17, 46, 0, 19.450, 19.952), (19, 48, 10, 19.962, 20.462), (20, 49, 11, 20.472, 20.935), (21, 50, 8, 20.945, 21.314), (22, 51, 0, 21.324, 21.544), (14, 53, 0, 21.554, 22.098), (15, 54, 0, 22.108, 22.620), (16, 55, 0, 22.630, 23.163), (17, 56, 0, 23.173, 23.675), (19, 58, 12, 23.685, 24.185), (20, 59, 13, 24.195, 24.658), (21, 60, 0, 24.668, 25.037), (22, 61, 0, 25.047, 25.267), (14, 63, 0, 25.277, 25.821), (15, 64, 0, 25.831, 26.343), (16, 65, 0, 26.353, 26.886), (17, 66, 0, 26.896, 27.399), (19, 68, 14, 27.409, 27.909), (20, 69, 15, 27.919, 28.381), (21, 70, 0, 28.391, 28.760), (22, 71, 0, 28.770, 28.990), (14, 73, 0, 29.000, 29.545), (15, 74, 0, 29.555, 30.066), (16, 75, 0, 30.076, 30.610), (17, 76, 0, 30.620, 31.122), (19, 78, 16, 31.132, 31.632), (20, 79, 14, 31.642, 32.105), (21, 80, 0, 32.115, 32.484), (22, 81, 0, 32.494, 32.714), (0, 83, 0, 32.724, 32.732), (0, 84, 4294967295, 32.742, 32.809)],
#     [(0, 9, 1, 11, 5.938, 6.424), (1, 7, 0, 12, 5.525, 5.940), (0, 12, 1, 13, 6.316, 6.654), (1, 8, 0, 18, 6.035, 6.318), (0, 18, 1, 20, 9.483, 9.771), (0, 22, 1, 21, 9.861, 10.151), (1, 17, 0, 22, 9.289, 9.485), (0, 28, 1, 30, 13.028, 13.498), (0, 32, 1, 31, 13.406, 13.877), (1, 26, 0, 32, 12.502, 13.030), (1, 27, 0, 37, 13.015, 13.408), (0, 37, 1, 40, 16.699, 17.221), (0, 42, 1, 41, 17.077, 17.600), (1, 36, 0, 42, 16.229, 16.701), (1, 38, 0, 47, 16.739, 17.079), (0, 47, 1, 50, 20.370, 20.945), (0, 52, 1, 51, 20.748, 21.324), (1, 46, 0, 52, 19.952, 20.372), (1, 48, 0, 57, 20.462, 20.750), (0, 57, 1, 60, 24.041, 24.668), (0, 62, 1, 60, 24.419, 24.668), (1, 56, 0, 62, 23.675, 24.043), (1, 58, 0, 67, 24.185, 24.421), (0, 67, 1, 70, 27.712, 28.391), (0, 72, 1, 70, 28.090, 28.391), (1, 66, 0, 72, 27.399, 27.714), (1, 68, 0, 77, 27.909, 28.092), (0, 77, 1, 79, 31.383, 31.642), (0, 82, 1, 80, 31.761, 32.115), (1, 76, 0, 82, 31.122, 31.385), ],
#     [(1, 7, 1, 8, 5.525, 5.535), (1, 8, 1, 10, 6.035, 6.045), (1, 10, 1, 11, 6.414, 6.424), (1, 11, 1, 13, 6.644, 6.654), (1, 17, 1, 19, 9.289, 9.299), (1, 19, 1, 20, 9.761, 9.771), (1, 20, 1, 21, 10.141, 10.151), (1, 26, 1, 27, 12.502, 12.512), (0, 22, 0, 28, 9.861, 9.863), (1, 27, 1, 29, 13.015, 13.025), (1, 29, 1, 30, 13.488, 13.498), (1, 30, 1, 31, 13.867, 13.877), (1, 36, 1, 38, 16.229, 16.239), (1, 38, 1, 39, 16.739, 16.749), (1, 39, 1, 40, 17.211, 17.221), (1, 40, 1, 41, 17.590, 17.600), (1, 46, 1, 48, 19.952, 19.962), (1, 48, 1, 49, 20.462, 20.472), (1, 49, 1, 50, 20.935, 20.945), (1, 50, 1, 51, 21.314, 21.324), (1, 56, 1, 58, 23.675, 23.685), (1, 58, 1, 59, 24.185, 24.195), (1, 59, 1, 60, 24.658, 24.668), (1, 66, 1, 68, 27.399, 27.409), (1, 68, 1, 69, 27.909, 27.919), (1, 69, 1, 70, 28.381, 28.391), (1, 76, 1, 78, 31.122, 31.132), (1, 78, 1, 79, 31.632, 31.642), (1, 79, 1, 80, 32.105, 32.115), ],

# ], vbd_task_name_map, with_text=False)
visualize_schedule3([ # Iter 10
    [(0, 103, 4294967295, 0.000, 0.000), (1, 0, 4294967295, 0.000, 0.100), (14, 1, 0, 0.100, 0.200), (15, 2, 1, 0.200, 0.300), (17, 4, 3, 0.300, 0.400), (19, 6, 2, 0.400, 0.500), (21, 8, 0, 0.500, 0.600), (23, 10, 1, 0.600, 0.700), (15, 12, 3, 0.700, 0.800), (17, 14, 2, 0.800, 0.900), (19, 16, 0, 0.900, 1.000), (21, 18, 1, 1.000, 1.100), (23, 20, 3, 1.100, 1.200), (15, 22, 2, 1.200, 1.300), (17, 24, 0, 1.300, 1.400), (19, 26, 1, 1.400, 1.500), (21, 28, 3, 1.500, 1.600), (23, 30, 2, 1.600, 1.700), (15, 32, 0, 1.700, 1.800), (17, 34, 1, 1.800, 1.900), (19, 36, 3, 1.900, 2.000), (21, 38, 2, 2.000, 2.100), (23, 40, 0, 2.100, 2.200), (15, 42, 1, 2.200, 2.300), (17, 44, 3, 2.300, 2.400), (19, 46, 2, 2.400, 2.500), (21, 48, 0, 2.500, 2.600), (23, 50, 1, 2.600, 2.700), (15, 52, 3, 2.700, 2.800), (17, 54, 2, 2.800, 2.900), (19, 56, 0, 2.900, 3.000), (21, 58, 1, 3.000, 3.100), (23, 60, 3, 3.100, 3.200), (15, 62, 2, 3.200, 3.300), (17, 64, 0, 3.300, 3.400), (19, 66, 1, 3.400, 3.500), (21, 68, 3, 3.500, 3.600), (23, 70, 2, 3.600, 3.700), (15, 72, 0, 3.700, 3.800), (17, 74, 1, 3.800, 3.900), (19, 76, 3, 3.900, 4.000), (21, 78, 2, 4.000, 4.100), (23, 80, 0, 4.100, 4.200), (15, 82, 1, 4.200, 4.300), (17, 84, 3, 4.300, 4.400), (19, 86, 2, 4.400, 4.500), (21, 88, 0, 4.500, 4.600), (23, 90, 1, 4.600, 4.700), (15, 92, 3, 4.700, 4.800), (17, 94, 2, 4.800, 4.900), (19, 96, 0, 4.900, 5.000), (21, 98, 1, 5.000, 5.100), (23, 100, 3, 5.100, 5.200), (0, 101, 2, 5.200, 5.300), (0, 102, 4294967295, 5.300, 5.400), (0, 104, 4294967295, 5.400, 5.400)],
    [(16, 3, 2, 0.200, 0.300), (18, 5, 0, 0.300, 0.400), (20, 7, 1, 0.400, 0.500), (22, 9, 3, 0.500, 0.600), (14, 11, 2, 0.600, 0.700), (16, 13, 0, 0.700, 0.800), (18, 15, 1, 0.800, 0.900), (20, 17, 3, 0.900, 1.000), (22, 19, 2, 1.000, 1.100), (14, 21, 0, 1.100, 1.200), (16, 23, 1, 1.200, 1.300), (18, 25, 3, 1.300, 1.400), (20, 27, 2, 1.400, 1.500), (22, 29, 0, 1.500, 1.600), (14, 31, 1, 1.600, 1.700), (16, 33, 3, 1.700, 1.800), (18, 35, 2, 1.800, 1.900), (20, 37, 0, 1.900, 2.000), (22, 39, 1, 2.000, 2.100), (14, 41, 3, 2.100, 2.200), (16, 43, 2, 2.200, 2.300), (18, 45, 0, 2.300, 2.400), (20, 47, 1, 2.400, 2.500), (22, 49, 3, 2.500, 2.600), (14, 51, 2, 2.600, 2.700), (16, 53, 0, 2.700, 2.800), (18, 55, 1, 2.800, 2.900), (20, 57, 3, 2.900, 3.000), (22, 59, 2, 3.000, 3.100), (14, 61, 0, 3.100, 3.200), (16, 63, 1, 3.200, 3.300), (18, 65, 3, 3.300, 3.400), (20, 67, 2, 3.400, 3.500), (22, 69, 0, 3.500, 3.600), (14, 71, 1, 3.600, 3.700), (16, 73, 3, 3.700, 3.800), (18, 75, 2, 3.800, 3.900), (20, 77, 0, 3.900, 4.000), (22, 79, 1, 4.000, 4.100), (14, 81, 3, 4.100, 4.200), (16, 83, 2, 4.200, 4.300), (18, 85, 0, 4.300, 4.400), (20, 87, 1, 4.400, 4.500), (22, 89, 3, 4.500, 4.600), (14, 91, 2, 4.600, 4.700), (16, 93, 0, 4.700, 4.800), (18, 95, 1, 4.800, 4.900), (20, 97, 3, 4.900, 5.000), (22, 99, 2, 5.000, 5.100)],
    [(0, 1, 1, 5, 0.200, 0.300), (1, 3, 0, 6, 0.300, 0.400), (0, 2, 1, 7, 0.300, 0.400), (1, 5, 0, 8, 0.400, 0.500), (0, 4, 1, 9, 0.400, 0.500), (1, 7, 0, 10, 0.500, 0.600), (0, 6, 1, 11, 0.500, 0.600), (1, 9, 0, 12, 0.600, 0.700), (0, 8, 1, 13, 0.600, 0.700), (1, 11, 0, 14, 0.700, 0.800), (0, 10, 1, 15, 0.700, 0.800), (1, 13, 0, 16, 0.800, 0.900), (0, 12, 1, 17, 0.800, 0.900), (1, 15, 0, 18, 0.900, 1.000), (0, 14, 1, 19, 0.900, 1.000), (1, 17, 0, 20, 1.000, 1.100), (0, 16, 1, 21, 1.000, 1.100), (1, 19, 0, 22, 1.100, 1.200), (0, 18, 1, 23, 1.100, 1.200), (1, 21, 0, 24, 1.200, 1.300), (0, 20, 1, 25, 1.200, 1.300), (1, 23, 0, 26, 1.300, 1.400), (0, 22, 1, 27, 1.300, 1.400), (1, 25, 0, 28, 1.400, 1.500), (0, 24, 1, 29, 1.400, 1.500), (1, 27, 0, 30, 1.500, 1.600), (0, 26, 1, 31, 1.500, 1.600), (1, 29, 0, 32, 1.600, 1.700), (0, 28, 1, 33, 1.600, 1.700), (1, 31, 0, 34, 1.700, 1.800), (0, 30, 1, 35, 1.700, 1.800), (1, 33, 0, 36, 1.800, 1.900), (0, 32, 1, 37, 1.800, 1.900), (1, 35, 0, 38, 1.900, 2.000), (0, 34, 1, 39, 1.900, 2.000), (1, 37, 0, 40, 2.000, 2.100), (0, 36, 1, 41, 2.000, 2.100), (1, 39, 0, 42, 2.100, 2.200), (0, 38, 1, 43, 2.100, 2.200), (1, 41, 0, 44, 2.200, 2.300), (0, 40, 1, 45, 2.200, 2.300), (1, 43, 0, 46, 2.300, 2.400), (0, 42, 1, 47, 2.300, 2.400), (1, 45, 0, 48, 2.400, 2.500), (0, 44, 1, 49, 2.400, 2.500), (1, 47, 0, 50, 2.500, 2.600), (0, 46, 1, 51, 2.500, 2.600), (1, 49, 0, 52, 2.600, 2.700), (0, 48, 1, 53, 2.600, 2.700), (1, 51, 0, 54, 2.700, 2.800), (0, 50, 1, 55, 2.700, 2.800), (1, 53, 0, 56, 2.800, 2.900), (0, 52, 1, 57, 2.800, 2.900), (1, 55, 0, 58, 2.900, 3.000), (0, 54, 1, 59, 2.900, 3.000), (1, 57, 0, 60, 3.000, 3.100), (0, 56, 1, 61, 3.000, 3.100), (1, 59, 0, 62, 3.100, 3.200), (0, 58, 1, 63, 3.100, 3.200), (1, 61, 0, 64, 3.200, 3.300), (0, 60, 1, 65, 3.200, 3.300), (1, 63, 0, 66, 3.300, 3.400), (0, 62, 1, 67, 3.300, 3.400), (1, 65, 0, 68, 3.400, 3.500), (0, 64, 1, 69, 3.400, 3.500), (1, 67, 0, 70, 3.500, 3.600), (0, 66, 1, 71, 3.500, 3.600), (1, 69, 0, 72, 3.600, 3.700), (0, 68, 1, 73, 3.600, 3.700), (1, 71, 0, 74, 3.700, 3.800), (0, 70, 1, 75, 3.700, 3.800), (1, 73, 0, 76, 3.800, 3.900), (0, 72, 1, 77, 3.800, 3.900), (1, 75, 0, 78, 3.900, 4.000), (0, 74, 1, 79, 3.900, 4.000), (1, 77, 0, 80, 4.000, 4.100), (0, 76, 1, 81, 4.000, 4.100), (1, 79, 0, 82, 4.100, 4.200), (0, 78, 1, 83, 4.100, 4.200), (1, 81, 0, 84, 4.200, 4.300), (0, 80, 1, 85, 4.200, 4.300), (1, 83, 0, 86, 4.300, 4.400), (0, 82, 1, 87, 4.300, 4.400), (1, 85, 0, 88, 4.400, 4.500), (0, 84, 1, 89, 4.400, 4.500), (1, 87, 0, 90, 4.500, 4.600), (0, 86, 1, 91, 4.500, 4.600), (1, 89, 0, 92, 4.600, 4.700), (0, 88, 1, 93, 4.600, 4.700), (1, 91, 0, 94, 4.700, 4.800), (0, 90, 1, 95, 4.700, 4.800), (1, 93, 0, 96, 4.800, 4.900), (0, 92, 1, 97, 4.800, 4.900), (1, 95, 0, 98, 4.900, 5.000), (0, 94, 1, 99, 4.900, 5.000), (1, 97, 0, 100, 5.000, 5.100), (1, 99, 0, 101, 5.100, 5.200), ],
    [(0, 0, 0, 1, 0.100, 0.100), (0, 1, 0, 2, 0.200, 0.200), (0, 0, 1, 3, 0.100, 0.200), (0, 2, 0, 4, 0.300, 0.300), (1, 3, 1, 5, 0.300, 0.300), (1, 5, 1, 7, 0.400, 0.400), (1, 7, 1, 9, 0.500, 0.500), (1, 9, 1, 11, 0.600, 0.600), (1, 11, 1, 13, 0.700, 0.700), (1, 13, 1, 15, 0.800, 0.800), (1, 15, 1, 17, 0.900, 0.900), (1, 17, 1, 19, 1.000, 1.000), (1, 19, 1, 21, 1.100, 1.100), (1, 21, 1, 23, 1.200, 1.200), (1, 23, 1, 25, 1.300, 1.300), (1, 25, 1, 27, 1.400, 1.400), (1, 27, 1, 29, 1.500, 1.500), (1, 29, 1, 31, 1.600, 1.600), (1, 31, 1, 33, 1.700, 1.700), (1, 33, 1, 35, 1.800, 1.800), (1, 35, 1, 37, 1.900, 1.900), (1, 37, 1, 39, 2.000, 2.000), (1, 39, 1, 41, 2.100, 2.100), (1, 41, 1, 43, 2.200, 2.200), (1, 43, 1, 45, 2.300, 2.300), (1, 45, 1, 47, 2.400, 2.400), (1, 47, 1, 49, 2.500, 2.500), (1, 49, 1, 51, 2.600, 2.600), (1, 51, 1, 53, 2.700, 2.700), (1, 53, 1, 55, 2.800, 2.800), (1, 55, 1, 57, 2.900, 2.900), (1, 57, 1, 59, 3.000, 3.000), (1, 59, 1, 61, 3.100, 3.100), (1, 61, 1, 63, 3.200, 3.200), (1, 63, 1, 65, 3.300, 3.300), (1, 65, 1, 67, 3.400, 3.400), (1, 67, 1, 69, 3.500, 3.500), (1, 69, 1, 71, 3.600, 3.600), (1, 71, 1, 73, 3.700, 3.700), (1, 73, 1, 75, 3.800, 3.800), (1, 75, 1, 77, 3.900, 3.900), (1, 77, 1, 79, 4.000, 4.000), (1, 79, 1, 81, 4.100, 4.100), (1, 81, 1, 83, 4.200, 4.200), (1, 83, 1, 85, 4.300, 4.300), (1, 85, 1, 87, 4.400, 4.400), (1, 87, 1, 89, 4.500, 4.500), (1, 89, 1, 91, 4.600, 4.600), (1, 91, 1, 93, 4.700, 4.700), (1, 93, 1, 95, 4.800, 4.800), (1, 95, 1, 97, 4.900, 4.900), (0, 96, 0, 98, 5.000, 5.000), (1, 97, 1, 99, 5.000, 5.000), (0, 98, 0, 100, 5.100, 5.100), (0, 100, 0, 101, 5.200, 5.200), ],
    
], vbd_task_name_map, with_text=False, figure_name="iter_10_schedule")
visualize_schedule3([ # Iter 1
    [(0, 13, 4294967295, 0.000, 0.000), (1, 0, 4294967295, 0.000, 0.100), (14, 1, 0, 0.100, 0.200), (15, 2, 1, 0.200, 0.300), (17, 4, 3, 0.300, 0.400), (19, 6, 2, 0.400, 0.500), (21, 8, 0, 0.500, 0.600), (23, 10, 1, 0.600, 0.700), (0, 11, 3, 0.700, 0.800), (0, 12, 4294967295, 0.800, 0.900), (0, 14, 4294967295, 0.900, 0.900)],
    [(16, 3, 2, 0.200, 0.300), (18, 5, 0, 0.300, 0.400), (20, 7, 1, 0.400, 0.500), (22, 9, 3, 0.500, 0.600)],
    [(0, 1, 1, 5, 0.200, 0.300), (1, 3, 0, 6, 0.300, 0.400), (0, 2, 1, 7, 0.300, 0.400), (1, 5, 0, 8, 0.400, 0.500), (0, 4, 1, 9, 0.400, 0.500), (1, 7, 0, 10, 0.500, 0.600), (1, 9, 0, 11, 0.600, 0.700), ],
    [(0, 0, 0, 1, 0.100, 0.100), (0, 1, 0, 2, 0.200, 0.200), (0, 0, 1, 3, 0.100, 0.200), (0, 2, 0, 4, 0.300, 0.300), (1, 3, 1, 5, 0.300, 0.300), (1, 5, 1, 7, 0.400, 0.400), (0, 6, 0, 8, 0.500, 0.500), (1, 7, 1, 9, 0.500, 0.500), (0, 8, 0, 10, 0.600, 0.600), (0, 10, 0, 11, 0.700, 0.700), ],
    
], vbd_task_name_map, with_text=True, figure_name="iter_1_schedule")




plt.show()
plt.ion()
