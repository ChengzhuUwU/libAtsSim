import math
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np
from matplotlib.font_manager import FontProperties

plt.rc('font',family='Times New Roman')

# plt.rcParams['xtick.labelsize'] = 16  # 设置字体大小
# plt.rcParams['xtick.labelweight'] = 'bold'  # 设置字体加粗

# Define colors for each job
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',
          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf',
          '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5',
          '#c49c94', '#f7b6d2', '#c7c7c7', '#dbdb8d', '#9edae5',
          '#ff5733', '#33ff57', '#3357ff', '#ff33a6', '#33fff1',
          '#ffae33', '#a833ff', '#33ffa8', '#ff3333',
          '#a8ff33', '#e833ff', '#33ffe8', '#ff8333', '#3383ff',
          '#ff33f1', '#a6ff33', '#ff33a8', '#33ff83', '#f1ff33']
# Function to visualize the scheduling results
def visualize_schedule(schedule):
    fig, ax = plt.subplots(figsize=(18, 9))
    ax.set_xlabel('Time (ms)')
    ax.set_ylabel('Processor')
    ax.set_yticks(range(2))
    ax.set_yticklabels([f'{["CPU", "GPU"][i]}' for i in range(2)])
    ax.grid(True)

    schedule_data = schedule[0: 2]

    legend_patches = [mpatches.Patch(color=colors[i % len(colors)], label=str(i)) for i in range(max(job for jobs in schedule_data for job, _, _, _, _ in jobs) + 1)]
    plt.legend(handles=legend_patches, loc='upper right', title='Job')
    for processor_id, processor_schedule in enumerate(schedule_data):
        for job, tid, buffer_idx, start_time, end_time in processor_schedule:
            duration = end_time - start_time
        
            bar = ax.broken_barh([(start_time, end_time - start_time + 0.015)], (processor_id - 0.4, 0.8), facecolors=colors[job % len(colors)])
            # ax.text(start_time + (end_time - start_time) / 2, processor_id, str(f'{tid}\n({job})\n({buffer_idx if buffer_idx != 4294967295 else "/"})'), ha='center', va='center', color='white' if duration > 1e-8 else 'red')
            ax.text(start_time + (end_time - start_time) / 2, processor_id, str(f'{job}\n({buffer_idx if buffer_idx != 4294967295 else "/"})'), ha='center', va='center', color='white' if duration > 1e-8 else 'red')
    
    
    if len(schedule) > 2:
        connection_data = schedule[2]
        for left_proc, left_tid, right_proc, right_tid, send_time, recv_time in connection_data:
            start_x = send_time
            end_x = recv_time
            start_y = left_proc + 0.42 if left_proc == 0 else left_proc - 0.42
            end_y = right_proc + 0.42 if right_proc == 0 else right_proc - 0.42
            
            ax.annotate(
                '',  # No text
                xy=(end_x, end_y),  # Arrow head position
                xytext=(start_x, start_y),  # Arrow tail position
                arrowprops=dict(
                    arrowstyle='->', 
                    color='red', 
                    lw=2
                )
            )
        connection_data = schedule[3]
        for left_proc, left_tid, right_proc, right_tid, send_time, recv_time in connection_data:
            start_x = send_time
            end_x = recv_time
            start_y = left_proc + 0.42 if left_proc == 0 else left_proc - 0.42
            end_y = right_proc + 0.42 if right_proc == 0 else right_proc - 0.42
            ax.annotate(
                '',  # No text
                xy=(end_x, end_y),  # Arrow head position
                xytext=(start_x, start_y),  # Arrow tail position
                arrowprops=dict(
                    arrowstyle='->', 
                    color='blue', 
                    lw=2
                )
            )
    plt.tight_layout()
    
# article_colors = [
#     '#e7e6e6', '#e56b6f', '#006400', '#540d6e', '#DDDE76',  # 4
#     '#DB6387', '#BFAD86', '#F5BE33', '#014f86', '#ff7900',  # 9
#     '#004e98', '#0582ca', # 11
#     '#b388eb', '#3bceac', 
#     '#87bba2', '#b5e2fa',  # Stretch # 15
#     '#fce5d5', '#e1afa9',  # 17
#     '#fe938c', '#bdb2ff', '#ffcad4', '#0a9396', 
#     '#fec89a', '#d88c9a', # Collison
#     '#5e548e', '#3a5a40',  # 25
# ]
article_colors = [
    # '#e7e6e6', '#e56b6f', '#006400', '#540d6e', '#DDDE76',  # 4
    # '#DB6387', '#BFAD86', '#F5BE33', '#014f86', '#ff7900',  # 9
    # '#004e98', '#0582ca', # 11
    # '#b388eb', '#3bceac', 
    # '#87bba2', '#b5e2fa',  # Stretch # 15
    '#e7e6e6', '#e8e5e6', '#fff2ca', '#fff2ca', '#ffe0e1',  # 4
    '#ffe0e1', '#f3e1ff', '#f3e1ff', '#e8e5e6', '#e8e5e6',  # 9
    '#defffe', '#defffe', # 11
    '#f0ffd7', '#e7e5e7', 
    '#dff0d6', '#ddebf8',  # Stretch # 15
    '#fce5d5', '#e1afa9',  # 17
    '#fe938c', '#bdb2ff', '#ffcad4', '#0a9396', 
    '#fec89a', '#d88c9a', # Collison
    '#5e548e', '#3a5a40',  # 25
]
xpbd_task_name_map = {
    0:"Misc.",
    14:"Stretching",
    15:"Bending",
    16:"Obs-Collision",
    17:"Self-Collision",
}
xpbd_tet_task_name_map = {
    0:"Misc.",
    14:"Stress 1",
    15:"Stress 2",
    16:"Stress 3",
    17:"Stress 4",
    18:"Stress 5",
    19:"Stress 6",
    20:"Stress 7",
    21:"Stress 8",
    22:"Obs-Collision",
    23:"Self-Collision",
}
vbd_task_name_map = {
    0:"Misc.",
    14:"Block 1",
    15:"Block 2",
    16:"Block 3",
    17:"Block 4",
    18:"Block 5",
    19:"Block 6",
    20:"Block 7",
    21:"Block 8",
    22:"Block 9",
    23:"Block 10",
    24:"Block 11",
    25:"Block 12",
    26:"Block 13",
    27:"Block 14",
}

fig_idx = 0
fig_names = [
    # "DFS",
    # "Merged",
    "sort_by_ranku_without_recalc",
    "sort_by_ranku_with_recalc",
]
# fig_names = [
#     "scheduled_without_recalc",
#     "scheduled_with_recalc",
# ]

def hex_to_rgb(hex_color):
    # Remove '#' symbol if present
    hex_color = hex_color.lstrip('#')
    # Convert hex to RGB
    r = int(hex_color[0:2], 16)
    g = int(hex_color[2:4], 16)
    b = int(hex_color[4:6], 16)
    fr = r / 256.0
    fg = g / 256.0
    fb = b / 256.0
    print(f"[{fr:.4f}, {fg:.4f}, {fb:.4f}], ")
    return np.array([fr, fg, fb])

def map_orig_idx_to_arcle(func_id):
    print()

def visualize_schedule3(schedule, name_map):

    device_count = 2
    block_to_space_scale = 0.65

    schedule_data = schedule[0: device_count]
    # device_labels = ["CPU", "GPU"]
    device_labels = ["", ""]
    device_spacing = 0.4 / device_count

    end_time = max(end_time for processor_schedule in schedule_data for _, _, _, _, end_time in processor_schedule) + 0.1
    
    bold_font = FontProperties(weight='bold', size=14)
    # fig, ax = plt.subplots(figsize=(18, 3.5))
    fig, ax = plt.subplots(figsize=(18, 3.5))
    # ax.set_xlabel('Time (ms)')
    ax.set_xlim(0, max(end_time for processor_schedule in schedule_data for _, _, _, _, end_time in processor_schedule) + 0.1)
    # ax.set_title("Heterogeneous Task Scheduling Visualization")
    ax.tick_params(axis='x')  
    for label in ax.get_xticklabels():
        label.set_fontproperties(bold_font)

    ax.spines['top'].set_visible(False)   
    ax.spines['right'].set_visible(False) 
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)  

    # ax.set_ylabel('Processor')
    # ax.set_yticks(range(2))
    # ax.set_yticklabels([f'{["CPU", "GPU"][i]}' for i in range(2)])
    yticks = [i * device_spacing for i in range(len(device_labels))]  # 根据缩放后的值计算刻度位置
    ax.set_yticks(yticks)  # 设置 y 轴刻度
    ax.set_yticklabels(device_labels)  # 设置 y 轴标签
    ax.grid(True, linestyle='--', alpha=0.9)

    

    # Create a legend for job numbers
    id_set = set()
    for processor_id, processor_schedule in enumerate(schedule_data):
        for job, tid, buffer_idx, start_time, end_time in processor_schedule:
            id_set.add(job)
    # legend_patches = [mpatches.Patch(color=colors[i % len(colors)], label=str(i)) for i in range(max(job for jobs in schedule_data for job, _, _, _, _ in jobs) + 1)]
    legend_patches = [
        mpatches.Patch(color=article_colors[i % len(article_colors)], label=name_map[i] if (i >= 14) or i == 0 else f"{i}")
            for i in id_set
    ]
    bold_font = FontProperties(weight='bold', size=16)
    plt.legend(
        handles=legend_patches,
        loc='upper center',
        bbox_to_anchor=(0.5, -0.05),  # 放置在图形下方
        ncol=math.ceil(len(id_set)/2),
        frameon=False,
        columnspacing = 0.5,
        prop={
            'size':16,
            'weight':'bold',
        }
    )
    
    for processor_id, processor_schedule in enumerate(schedule_data):
        y_base = processor_id * device_spacing 
        for job, tid, buffer_idx, start_time, end_time in processor_schedule:
            duration = end_time - start_time
            color = article_colors[job % len(article_colors)]
            # smoother = -0.01 if processor_id == 0 else 0
            smoother = 0.0 if processor_id == 0 else 0
            ax.broken_barh(
                # [(start_time, end_time - start_time + 0.04)], 
                [(start_time, end_time - start_time + smoother)], 
                (y_base, device_spacing * block_to_space_scale),  # 高度缩放到设备区间
                facecolors=color,
                # edgecolor='black'
            )
            # bar = ax.broken_barh([(start_time, end_time - start_time + 0.04)], (processor_id / 3.6, 0.2), facecolors=color)
            ax.text(
                start_time + (end_time - start_time) / 2, 
                y_base + (device_spacing * block_to_space_scale) / 2, 
                str(f'{job-14}\n({buffer_idx if buffer_idx != 4294967295 else "/"})'), 
                # str(f'{tid}\n({job})\n({buffer_idx if buffer_idx != 4294967295 else "/"})'), 
                ha='center', va='center', color='black' if duration > 1e-8 else 'red')
    
    if len(schedule) > 2:
        connection_data = schedule[2]
        for left_proc, left_tid, right_proc, right_tid, send_time, recv_time in connection_data:
            # array_offset = 0.02
            array_offset = 0.0
            start_x = send_time - array_offset
            end_x = recv_time + array_offset

            # y_base = processor_id * device_spacing 
            delta = device_spacing * block_to_space_scale
            start_y = delta - 0.00 if left_proc == 0  else left_proc * device_spacing  + 0.00
            end_y   = delta - 0.00 if right_proc == 0 else right_proc * device_spacing + 0.00
            ax.annotate(
                '',  # No text
                xy=(end_x, end_y),  # Arrow head position
                xytext=(start_x, start_y),  # Arrow tail position
                arrowprops=dict(
                    arrowstyle='->', 
                    color='crimson' if left_proc == 0 else 'green', 
                    connectionstyle='arc3',
                    # shrink=0.05
                    lw=1.5
                )
            )

    if len(schedule) > 3:
        connection_data = schedule[3]
        for left_proc, left_tid, right_proc, right_tid, send_time, recv_time in connection_data:
            start_x = send_time - 0.01
            # end_x = send_time + 0.03
            end_x = recv_time + 0.01
            delta = device_spacing * 0.65
            start_y = delta if left_proc == 0 else  left_proc * device_spacing  
            end_y   = delta if right_proc == 0 else right_proc * device_spacing 

            ax.annotate(
                '',  # No text
                xy=(end_x, end_y),  # Arrow head position
                xytext=(start_x, start_y),  # Arrow tail position
                arrowprops=dict(
                    arrowstyle='->', 
                    color='blue', 
                    lw=2
                )
            )

    plt.tight_layout()
    
    global fig_idx
    name = fig_names[fig_idx]
    # plt.savefig(f"/Users/huohuo/Desktop/CDMC/ArticleFigs/V3/{name}.svg", format="svg", bbox_inches="tight")
    # plt.savefig(f"/Users/huohuo/Desktop/CDMC/ArticleFigs/V3/{name}.png", format="png", dpi=300, bbox_inches="tight")
    fig_idx += 1

def draw_tasks_order1(DFS):
    device_spacing = 1
    block_to_space_scale = 0.4

    fig, ax = plt.subplots(figsize=(24, 2))
    # 隐藏坐标轴
    ax.axis('off')

    # 绘制任务块
    for idx, (task_id, cluster_id, ranku) in enumerate(DFS):
        # 计算块位置
        x_start = idx  # 每个任务按顺序排列
        y_base = 0  # 根据设备 ID 决定垂直位置
        color = article_colors[task_id % len(article_colors)]  # 匹配颜色

        # 绘制颜色块
        ax.broken_barh(
            [(x_start, 1)], 
            (y_base, device_spacing * block_to_space_scale),
            facecolors=color,
            edgecolor='black'
        )
    ax.spines['top'].set_visible(False)   
    ax.spines['right'].set_visible(False) 
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)  

    plt.tight_layout()

    global fig_idx
    name = fig_names[fig_idx]
    # plt.savefig(f"/Users/huohuo/Desktop/CDMC/ArticleFigs/V3/{name}.svg", format="svg", bbox_inches="tight")
    plt.savefig(f"/Users/huohuo/Desktop/CDMC/ArticleFigs/V3/{name}.png", format="png", dpi=300, bbox_inches="tight")
    fig_idx += 1
    

def draw_tasks_order2(DFS):
    device_spacing = 1
    block_to_space_scale = 0.8

    fig, ax = plt.subplots(figsize=(24, 3))
    # 隐藏坐标轴
    ax.axis('off')

    # 绘制任务块
    for idx, (task_id, cluster_id, ranku) in enumerate(DFS):
        # 计算块位置
        x_start = idx  # 每个任务按顺序排列
        y_base = 0  # 根据设备 ID 决定垂直位置
        color = article_colors[task_id % len(article_colors)]  # 匹配颜色

        # 绘制颜色块
        ax.broken_barh(
            [(x_start, 1)], 
            (y_base, device_spacing * block_to_space_scale),
            facecolors=color,
            edgecolor='black'
        )

        ranku_formatted = f"{ranku:.3f}"

        # 在块中添加文字
        ax.text(
            x_start + 0.5,  # 块中心
            y_base + (device_spacing * block_to_space_scale) - 0.1,  # 垂直居中
            # f"[{ranku_formatted}]   ({task_id})" if cluster_id == 0 else f"[{ranku_formatted}]   ({task_id}-{cluster_id})", 
            f"[{ranku_formatted}]   ({task_id})" if cluster_id == 0 else f"[{ranku_formatted}]   ({xpbd_task_name_map[task_id]})", 
            ha='center',
            va='top',
            rotation=-90,  # 文字旋转 90 度
            fontsize=12,
            color='black',
            # weight='bold'
        )
    ax.spines['top'].set_visible(False)   
    ax.spines['right'].set_visible(False) 
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)  

    plt.tight_layout()

    global fig_idx
    name = fig_names[fig_idx]
    # plt.savefig(f"/Users/huohuo/Desktop/CDMC/ArticleFigs/V3/{name}.svg", format="svg", bbox_inches="tight")
    plt.savefig(f"/Users/huohuo/Desktop/CDMC/ArticleFigs/V3/{name}.png", format="png", dpi=300, bbox_inches="tight")
    fig_idx += 1


dfs = [
(9, 0,  6.120),  (8, 0, 13.145),  (3, 0,  5.925),  (5, 0,  5.700),  (7, 0,  5.266),  (11, 0,  4.400),  (2, 0, 12.913),  (4, 0, 12.691),  (6, 0, 12.216),  (10, 0,  6.413),  (12, 0,  4.807),  (13, 0,  3.489),  (1, 0,  3.757),  (15, 8,  3.259),  (15, 7,  3.196),  (15, 6,  3.197),  (15, 5,  3.200),  (15, 4,  3.202),  (15, 3,  3.203),  (15, 2,  3.203),  (15, 1,  3.204),  (15, 8,  2.921),  (15, 7,  2.858),  (15, 6,  2.859),  (15, 5,  2.862),  (15, 4,  2.864),  (15, 3,  2.865),  (15, 2,  2.865),  (15, 1,  2.866),  (15, 8,  2.583),  (15, 7,  2.520),  (15, 6,  2.521),  (15, 5,  2.524),  (15, 4,  2.526),  (15, 3,  2.527),  (15, 2,  2.527),  (15, 1,  2.528),  (15, 8,  2.245),  (15, 7,  2.182),  (15, 6,  2.183),  (15, 5,  2.186),  (15, 4,  2.188),  (15, 3,  2.189),  (15, 2,  2.189),  (15, 1,  2.190),  (15, 8,  1.907),  (15, 7,  1.844),  (15, 6,  1.845),  (15, 5,  1.848),  (15, 4,  1.850),  (15, 3,  1.851),  (15, 2,  1.851),  (15, 1,  1.852),  (15, 8,  1.569),  (15, 7,  1.506),  (15, 6,  1.507),  (15, 5,  1.510),  (15, 4,  1.512),  (15, 3,  1.513),  (15, 2,  1.513),  (15, 1,  1.514),  (15, 8,  1.230),  (15, 7,  1.168),  (15, 6,  1.169),  (15, 5,  1.172),  (15, 4,  1.174),  (15, 3,  1.175),  (15, 2,  1.175),  (15, 1,  1.176),  (15, 8,  0.892),  (15, 7,  0.830),  (15, 6,  0.831),  (15, 5,  0.834),  (15, 4,  0.836),  (15, 3,  0.837),  (15, 2,  0.837),  (15, 1,  0.838),  (14, 8,  3.011),  (14, 7,  3.002),  (14, 6,  3.007),  (14, 5,  3.010),  (14, 4,  3.010),  (14, 3,  3.009),  (14, 2,  3.008),  (14, 1,  3.006),  (14, 8,  2.763),  (14, 7,  2.755),  (14, 6,  2.760),  (14, 5,  2.763),  (14, 4,  2.762),  (14, 3,  2.762),  (14, 2,  2.761),  (14, 1,  2.759),  (14, 8,  2.515),  (14, 7,  2.507),  (14, 6,  2.512),  (14, 5,  2.515),  (14, 4,  2.515),  (14, 3,  2.514),  (14, 2,  2.513),  (14, 1,  2.511),  (14, 8,  2.267),  (14, 7,  2.259),  (14, 6,  2.264),  (14, 5,  2.267),  (14, 4,  2.267),  (14, 3,  2.266),  (14, 2,  2.265),  (14, 1,  2.263),  (14, 8,  2.020),  (14, 7,  2.011),  (14, 6,  2.016),  (14, 5,  2.019),  (14, 4,  2.019),  (14, 3,  2.018),  (14, 2,  2.017),  (14, 1,  2.015),  (14, 8,  1.772),  (14, 7,  1.764),  (14, 6,  1.769),  (14, 5,  1.772),  (14, 4,  1.771),  (14, 3,  1.771),  (14, 2,  1.770),  (14, 1,  1.768),  (14, 8,  1.524),  (14, 7,  1.516),  (14, 6,  1.521),  (14, 5,  1.524),  (14, 4,  1.524),  (14, 3,  1.523),  (14, 2,  1.522),  (14, 1,  1.520),  (14, 8,  1.276),  (14, 7,  1.268),  (14, 6,  1.273),  (14, 5,  1.276),  (14, 4,  1.276),  (14, 3,  1.275),  (14, 2,  1.274),  (14, 1,  1.272),  (17, 1,  2.783),  (17, 1,  2.535),  (17, 1,  2.287),  (17, 1,  2.039),  (17, 1,  1.792),  (17, 1,  1.544),  (17, 1,  1.296),  (17, 1,  1.048),  (16, 1,  2.523),  (16, 1,  2.277),  (16, 1,  2.031),  (16, 1,  1.785),  (16, 1,  1.539),  (16, 1,  1.293),  (16, 1,  1.047),  (16, 1,  0.801),   

]
bfs = [
(1, 0,  3.757),  (13, 0,  3.489),  (8, 0, 13.145),  (9, 0,  6.120),  (2, 0, 12.913),  (3, 0,  5.925),  (14, 1,  3.006),  (14, 2,  3.008),  (14, 3,  3.009),  (14, 4,  3.010),  (14, 5,  3.010),  (14, 6,  3.007),  (14, 7,  3.002),  (14, 8,  3.011),  (15, 1,  3.204),  (15, 2,  3.203),  (15, 3,  3.203),  (15, 4,  3.202),  (15, 5,  3.200),  (15, 6,  3.197),  (15, 7,  3.196),  (15, 8,  3.259),  (4, 0, 12.691),  (5, 0,  5.700),  (14, 1,  2.759),  (14, 2,  2.761),  (14, 3,  2.762),  (14, 4,  2.762),  (14, 5,  2.763),  (14, 6,  2.760),  (14, 7,  2.755),  (14, 8,  2.763),  (15, 1,  2.866),  (15, 2,  2.865),  (15, 3,  2.865),  (15, 4,  2.864),  (15, 5,  2.862),  (15, 6,  2.859),  (15, 7,  2.858),  (15, 8,  2.921),  (6, 0, 12.216),  (7, 0,  5.266),  (14, 1,  2.511),  (14, 2,  2.513),  (14, 3,  2.514),  (14, 4,  2.515),  (14, 5,  2.515),  (14, 6,  2.512),  (14, 7,  2.507),  (14, 8,  2.515),  (15, 1,  2.528),  (15, 2,  2.527),  (15, 3,  2.527),  (15, 4,  2.526),  (15, 5,  2.524),  (15, 6,  2.521),  (15, 7,  2.520),  (15, 8,  2.583),  (10, 0,  6.413),  (11, 0,  4.400),  (14, 1,  2.263),  (14, 2,  2.265),  (14, 3,  2.266),  (14, 4,  2.267),  (14, 5,  2.267),  (14, 6,  2.264),  (14, 7,  2.259),  (14, 8,  2.267),  (15, 1,  2.190),  (15, 2,  2.189),  (15, 3,  2.189),  (15, 4,  2.188),  (15, 5,  2.186),  (15, 6,  2.183),  (15, 7,  2.182),  (15, 8,  2.245),  (14, 1,  2.015),  (14, 2,  2.017),  (14, 3,  2.018),  (14, 4,  2.019),  (14, 5,  2.019),  (14, 6,  2.016),  (14, 7,  2.011),  (14, 8,  2.020),  (15, 1,  1.852),  (15, 2,  1.851),  (15, 3,  1.851),  (15, 4,  1.850),  (15, 5,  1.848),  (15, 6,  1.845),  (15, 7,  1.844),  (15, 8,  1.907),  (12, 0,  4.807),  (14, 1,  1.768),  (14, 2,  1.770),  (14, 3,  1.771),  (14, 4,  1.771),  (14, 5,  1.772),  (14, 6,  1.769),  (14, 7,  1.764),  (14, 8,  1.772),  (15, 1,  1.514),  (15, 2,  1.513),  (15, 3,  1.513),  (15, 4,  1.512),  (15, 5,  1.510),  (15, 6,  1.507),  (15, 7,  1.506),  (15, 8,  1.569),  (14, 1,  1.520),  (14, 2,  1.522),  (14, 3,  1.523),  (14, 4,  1.524),  (14, 5,  1.524),  (14, 6,  1.521),  (14, 7,  1.516),  (14, 8,  1.524),  (15, 1,  1.176),  (15, 2,  1.175),  (15, 3,  1.175),  (15, 4,  1.174),  (15, 5,  1.172),  (15, 6,  1.169),  (15, 7,  1.168),  (15, 8,  1.230),  (14, 1,  1.272),  (14, 2,  1.274),  (14, 3,  1.275),  (14, 4,  1.276),  (14, 5,  1.276),  (14, 6,  1.273),  (14, 7,  1.268),  (14, 8,  1.276),  (15, 1,  0.838),  (15, 2,  0.837),  (15, 3,  0.837),  (15, 4,  0.836),  (15, 5,  0.834),  (15, 6,  0.831),  (15, 7,  0.830),  (15, 8,  0.892),  (17, 1,  2.783),  (16, 1,  2.523),  (17, 1,  2.535),  (16, 1,  2.277),  (17, 1,  2.287),  (16, 1,  2.031),  (17, 1,  2.039),  (16, 1,  1.785),  (17, 1,  1.792),  (16, 1,  1.539),  (17, 1,  1.544),  (16, 1,  1.293),  (17, 1,  1.296),  (16, 1,  1.047),  (17, 1,  1.048),  (16, 1,  0.801),  

]
merged = [ 
(9, 0,  6.249),  (8, 0, 13.708),  (3, 0,  6.055),  (5, 0,  5.825),  (7, 0,  5.374),  (11, 0,  4.454),  (2, 0, 13.473),  (4, 0, 13.245),  (6, 0, 12.742),  (10, 0,  6.510),  (12, 0,  4.841),  (13, 0,  6.990),  (1, 0,  7.269),  (15, 2,  6.477),  (15, 1,  6.756),  (15, 2,  5.703),  (15, 1,  5.982),  (15, 2,  4.929),  (15, 1,  5.208),  (15, 2,  4.156),  (15, 1,  4.434),  (15, 2,  3.382),  (15, 1,  3.661),  (15, 2,  2.608),  (15, 1,  2.887),  (15, 2,  1.834),  (15, 1,  2.113),  (15, 2,  1.061),  (15, 1,  1.339),  (14, 2,  4.269),  (14, 1,  4.370),  (14, 2,  3.856),  (14, 1,  3.957),  (14, 2,  3.443),  (14, 1,  3.544),  (14, 2,  3.031),  (14, 1,  3.132),  (14, 2,  2.618),  (14, 1,  2.719),  (14, 2,  2.205),  (14, 1,  2.306),  (14, 2,  1.792),  (14, 1,  1.893),  (14, 2,  1.379),  (14, 1,  1.480),  (17, 1,  2.851),  (17, 1,  2.596),  (17, 1,  2.341),  (17, 1,  2.086),  (17, 1,  1.832),  (17, 1,  1.577),  (17, 1,  1.322),  (17, 1,  1.067),  (16, 1,  2.539),  (16, 1,  2.293),  (16, 1,  2.046),  (16, 1,  1.799),  (16, 1,  1.553),  (16, 1,  1.306),  (16, 1,  1.059),  (16, 1,  0.812),

]


sort_by_ranku_without_recalc = [
(8, 0, 13.708),  (2, 0, 13.473),  (4, 0, 13.245),  (6, 0, 12.742),  (1, 0,  7.269),  (13, 0,  6.990),  (15, 1,  6.756),  (10, 0,  6.510),  (15, 2,  6.477),  (9, 0,  6.249),  (3, 0,  6.055),  (15, 1,  5.982),  (5, 0,  5.825),  (15, 2,  5.703),  (7, 0,  5.374),  (15, 1,  5.208),  (15, 2,  4.929),  (12, 0,  4.841),  (11, 0,  4.454),  (15, 1,  4.434),  (14, 1,  4.370),  (14, 2,  4.269),  (15, 2,  4.156),  (14, 1,  3.957),  (14, 2,  3.856),  (15, 1,  3.661),  (14, 1,  3.544),  (14, 2,  3.443),  (15, 2,  3.382),  (14, 1,  3.132),  (14, 2,  3.031),  (15, 1,  2.887),  (17, 1,  2.851),  (14, 1,  2.719),  (14, 2,  2.618),  (15, 2,  2.608),  (17, 1,  2.596),  (16, 1,  2.539),  (17, 1,  2.341),  (14, 1,  2.306),  (16, 1,  2.293),  (14, 2,  2.205),  (15, 1,  2.113),  (17, 1,  2.086),  (16, 1,  2.046),  (14, 1,  1.893),  (15, 2,  1.834),  (17, 1,  1.832),  (16, 1,  1.799),  (14, 2,  1.792),  (17, 1,  1.577),  (16, 1,  1.553),  (14, 1,  1.480),  (14, 2,  1.379),  (15, 1,  1.339),  (17, 1,  1.322),  (16, 1,  1.306),  (17, 1,  1.067),  (15, 2,  1.061),  (16, 1,  1.059),  (16, 1,  0.812), 

]
sort_by_ranku_with_recalc = [
(8, 0, 29.391),  (2, 0, 29.157),  (4, 0, 28.929),  (6, 0, 28.425),  (10, 0, 22.193),  (9, 0, 21.933),  (3, 0, 21.738),  (5, 0, 21.509),  (7, 0, 21.058),  (1, 0, 21.041),  (13, 0, 20.762),  (14, 1, 20.528),  (12, 0, 20.524),  (11, 0, 20.137),  (14, 2, 20.115),  (15, 1, 19.803),  (15, 2, 19.029),  (17, 1, 18.534),  (16, 1, 18.279),  (14, 1, 18.033),  (14, 2, 17.620),  (15, 1, 17.308),  (15, 2, 16.534),  (17, 1, 16.039),  (16, 1, 15.784),  (14, 1, 15.537),  (14, 2, 15.124),  (15, 1, 14.812),  (15, 2, 14.039),  (17, 1, 13.544),  (16, 1, 13.289),  (14, 1, 13.042),  (14, 2, 12.629),  (15, 1, 12.317),  (15, 2, 11.543),  (17, 1, 11.048),  (16, 1, 10.793),  (14, 1, 10.547),  (14, 2, 10.134),  (15, 1,  9.822),  (15, 2,  9.048),  (17, 1,  8.553),  (16, 1,  8.298),  (14, 1,  8.051),  (14, 2,  7.639),  (15, 1,  7.327),  (15, 2,  6.553),  (17, 1,  6.058),  (16, 1,  5.803),  (14, 1,  5.556),  (14, 2,  5.143),  (15, 1,  4.831),  (15, 2,  4.058),  (17, 1,  3.562),  (16, 1,  3.308),  (14, 1,  3.061),  (14, 2,  2.648),  (15, 1,  2.336),  (15, 2,  1.562),  (17, 1,  1.067),  (16, 1,  0.812), 

]
# draw_tasks_order1(bfs)

# draw_tasks_order1(dfs)
# draw_tasks_order1(merged)
# draw_tasks_order2(sort_by_ranku_without_recalc)
# draw_tasks_order2(sort_by_ranku_with_recalc)


merged_schedule_without_recalc = [
    [(0, 69, 4294967295, 0.000, 0.000), (1, 0, 4294967295, 0.002, 0.082), (9, 60, 4294967295, 0.084, 0.104), (4, 57, 4294967295, 0.222, 0.543), (3, 61, 4294967295, 0.545, 0.626), (15, 13, 0, 0.804, 1.811), (5, 62, 4294967295, 1.813, 2.082), (0, 65, 4294967295, 2.246, 2.384), (12, 67, 4294967295, 2.386, 3.839), (0, 68, 4294967295, 3.841, 3.841), (0, 2, 4294967295, 3.919, 3.940), (17, 4, 0, 3.942, 4.056), (17, 10, 2, 4.058, 4.171), (16, 9, 5, 4.173, 4.263), (17, 16, 3, 4.265, 4.379), (16, 15, 4, 4.381, 4.471), (17, 22, 6, 4.473, 4.587), (16, 21, 2, 4.589, 4.679), (17, 28, 8, 4.681, 4.795), (16, 27, 7, 4.797, 4.886), (17, 34, 3, 4.888, 5.002), (16, 33, 4, 5.004, 5.094), (17, 40, 6, 5.096, 5.210), (16, 39, 2, 5.212, 5.302), (17, 46, 2, 5.304, 5.418), (16, 45, 9, 5.420, 5.510), (16, 51, 7, 5.512, 5.601), (0, 52, 7, 5.603, 5.653), (0, 53, 4294967295, 5.655, 5.928)],
    [(0, 54, 4294967295, 0.000, 0.035), (8, 55, 4294967295, 0.045, 0.056), (2, 56, 4294967295, 0.066, 0.077), (13, 1, 4294967295, 0.087, 0.100), (0, 3, 4294967295, 0.302, 0.335), (15, 7, 0, 0.345, 0.520), (15, 8, 0, 0.530, 0.659), (14, 5, 1, 0.669, 0.722), (6, 58, 4294967295, 0.763, 1.785), (10, 59, 4294967295, 1.795, 2.101), (15, 14, 0, 2.111, 2.240), (14, 6, 0, 2.250, 2.289), (7, 63, 4294967295, 2.302, 2.436), (15, 19, 0, 2.446, 2.621), (15, 20, 0, 2.631, 2.760), (11, 64, 4294967295, 2.770, 2.854), (15, 25, 0, 2.864, 3.040), (15, 26, 0, 3.050, 3.178), (14, 11, 0, 3.188, 3.242), (14, 12, 0, 3.252, 3.292), (15, 31, 0, 3.302, 3.477), (14, 17, 0, 3.487, 3.540), (14, 18, 0, 3.550, 3.590), (15, 32, 0, 3.600, 3.729), (0, 66, 4294967295, 3.739, 3.774), (14, 23, 2, 3.784, 3.838), (14, 24, 2, 3.848, 3.888), (15, 37, 3, 3.898, 4.073), (14, 29, 4, 4.083, 4.137), (14, 30, 4, 4.147, 4.186), (15, 38, 6, 4.196, 4.325), (14, 35, 0, 4.335, 4.389), (14, 36, 2, 4.399, 4.438), (15, 43, 7, 4.448, 4.624), (14, 41, 3, 4.634, 4.687), (15, 44, 4, 4.697, 4.826), (14, 42, 6, 4.836, 4.876), (14, 47, 6, 4.886, 4.939), (14, 48, 2, 4.949, 4.989), (15, 49, 9, 4.999, 5.174), (15, 50, 7, 5.184, 5.313), (0, 70, 4294967295, 5.928, 5.928)],
    [(1, 32, 0, 4, 3.729, 3.942), (1, 24, 0, 10, 3.888, 4.058), (1, 8, 0, 13, 0.659, 0.804), (0, 13, 1, 14, 1.811, 2.111), (1, 30, 0, 15, 4.186, 4.381), (1, 37, 0, 16, 4.073, 4.265), (1, 36, 0, 21, 4.438, 4.589), (1, 38, 0, 22, 4.325, 4.473), (1, 43, 0, 27, 4.624, 4.797), (1, 44, 0, 33, 4.826, 5.004), (1, 41, 0, 34, 4.687, 4.888), (0, 4, 1, 35, 4.056, 4.335), (0, 10, 1, 36, 4.171, 4.399), (1, 48, 0, 39, 4.989, 5.212), (1, 47, 0, 40, 4.939, 5.096), (0, 9, 1, 41, 4.263, 4.634), (0, 16, 1, 41, 4.379, 4.634), (0, 22, 1, 42, 4.587, 4.836), (0, 15, 1, 44, 4.471, 4.697), (1, 49, 0, 45, 5.174, 5.420), (0, 21, 1, 48, 4.679, 4.949), (0, 28, 1, 50, 4.795, 5.184), (0, 27, 1, 50, 4.886, 5.184), (1, 50, 0, 51, 5.313, 5.512), ],
    [(1, 8, 1, 5, 0.659, 0.669), (0, 10, 0, 9, 4.171, 4.173), (1, 5, 1, 14, 0.722, 2.111), (1, 32, 1, 23, 3.729, 3.784), (0, 21, 0, 28, 4.679, 4.681), (1, 37, 1, 29, 4.073, 4.083), (0, 34, 0, 33, 5.002, 5.004), (1, 38, 1, 35, 4.325, 4.335), (1, 35, 1, 36, 4.389, 4.399), (1, 24, 1, 37, 3.888, 3.898), (1, 30, 1, 38, 4.186, 4.196), (0, 40, 0, 39, 5.210, 5.212), (0, 33, 0, 40, 5.094, 5.096), (1, 43, 1, 41, 4.624, 4.634), (1, 44, 1, 42, 4.826, 4.836), (1, 36, 1, 43, 4.438, 4.448), (1, 41, 1, 44, 4.687, 4.697), (0, 46, 0, 45, 5.418, 5.420), (1, 47, 1, 48, 4.939, 4.949), (1, 48, 1, 49, 4.989, 4.999), (1, 49, 1, 50, 5.174, 5.184), (0, 45, 0, 51, 5.510, 5.512), ],

]
merged_schedule_with_recalc = [
    [(0, 69, 4294967295, 0.000, 0.000), (9, 60, 4294967295, 0.002, 0.022), (1, 0, 4294967295, 0.024, 0.104), (4, 57, 4294967295, 0.222, 0.543), (5, 62, 4294967295, 0.545, 0.814), (7, 63, 4294967295, 0.816, 2.157), (15, 8, 0, 2.159, 2.656), (14, 12, 0, 2.658, 2.877), (15, 14, 0, 2.879, 3.376), (14, 18, 1, 3.378, 3.597), (0, 68, 4294967295, 3.729, 3.729), (0, 2, 4294967295, 3.869, 3.889), (17, 4, 2, 3.891, 4.005), (16, 9, 4, 4.007, 4.097), (17, 10, 0, 4.099, 4.213), (16, 15, 1, 4.215, 4.305), (17, 16, 3, 4.307, 4.421), (16, 21, 3, 4.423, 4.512), (17, 22, 4, 4.555, 4.669), (16, 27, 4, 4.671, 4.761), (17, 28, 3, 4.992, 5.106), (16, 33, 3, 5.108, 5.198), (17, 34, 4, 5.429, 5.543), (16, 39, 4, 5.545, 5.635), (17, 40, 3, 5.866, 5.980), (16, 45, 3, 5.982, 6.072), (17, 46, 4, 6.304, 6.418), (16, 51, 4, 6.420, 6.509), (0, 52, 3, 6.627, 6.677), (0, 53, 4294967295, 6.679, 6.952)],
    [(0, 54, 4294967295, 0.000, 0.035), (8, 55, 4294967295, 0.045, 0.056), (2, 56, 4294967295, 0.066, 0.077), (13, 1, 4294967295, 0.087, 0.100), (3, 61, 4294967295, 0.242, 0.255), (0, 3, 4294967295, 0.324, 0.357), (14, 5, 0, 0.367, 0.421), (14, 6, 0, 0.431, 0.471), (15, 7, 0, 0.481, 0.656), (14, 11, 0, 0.666, 0.720), (6, 58, 4294967295, 0.763, 1.785), (10, 59, 4294967295, 1.795, 2.101), (0, 65, 4294967295, 2.111, 2.180), (12, 67, 4294967295, 2.190, 3.584), (11, 64, 4294967295, 3.594, 3.678), (0, 66, 4294967295, 3.688, 3.724), (15, 13, 0, 3.734, 3.909), (14, 17, 1, 3.919, 3.973), (15, 19, 3, 3.983, 4.158), (15, 20, 5, 4.168, 4.296), (14, 23, 2, 4.306, 4.360), (14, 24, 4, 4.370, 4.410), (15, 25, 6, 4.420, 4.595), (15, 26, 1, 4.605, 4.734), (14, 29, 3, 4.744, 4.797), (14, 30, 3, 4.807, 4.847), (15, 31, 7, 4.857, 5.032), (15, 32, 4, 5.042, 5.171), (14, 35, 4, 5.181, 5.235), (14, 36, 4, 5.245, 5.284), (15, 37, 8, 5.294, 5.469), (15, 38, 3, 5.479, 5.608), (14, 41, 3, 5.618, 5.672), (14, 42, 3, 5.682, 5.721), (15, 43, 9, 5.731, 5.907), (15, 44, 4, 5.917, 6.045), (14, 47, 4, 6.055, 6.109), (14, 48, 4, 6.119, 6.159), (15, 49, 10, 6.169, 6.344), (15, 50, 3, 6.354, 6.482), (0, 70, 4294967295, 6.952, 6.952)],
    [(1, 11, 0, 8, 0.720, 2.159), (1, 13, 0, 10, 3.909, 4.099), (0, 14, 1, 13, 3.376, 3.734), (1, 17, 0, 15, 3.973, 4.215), (1, 19, 0, 16, 4.158, 4.307), (0, 18, 1, 17, 3.597, 3.919), (1, 24, 0, 22, 4.410, 4.555), (0, 4, 1, 23, 4.005, 4.306), (0, 9, 1, 24, 4.097, 4.370), (0, 10, 1, 26, 4.213, 4.605), (0, 15, 1, 26, 4.305, 4.605), (1, 30, 0, 28, 4.847, 4.992), (0, 21, 1, 29, 4.512, 4.744), (0, 27, 1, 32, 4.761, 5.042), (1, 36, 0, 34, 5.284, 5.429), (0, 33, 1, 38, 5.198, 5.479), (1, 42, 0, 40, 5.721, 5.866), (0, 39, 1, 44, 5.635, 5.917), (1, 48, 0, 46, 6.159, 6.304), (0, 45, 1, 50, 6.072, 6.354), (1, 50, 0, 52, 6.482, 6.627), ],
    [(0, 18, 0, 4, 3.597, 3.891), (0, 4, 0, 9, 4.005, 4.007), (1, 11, 1, 13, 0.720, 3.734), (1, 13, 1, 17, 3.909, 3.919), (0, 14, 0, 18, 3.376, 3.378), (1, 17, 1, 19, 3.973, 3.983), (1, 19, 1, 20, 4.158, 4.168), (1, 20, 1, 23, 4.296, 4.306), (1, 23, 1, 24, 4.360, 4.370), (1, 24, 1, 25, 4.410, 4.420), (1, 25, 1, 26, 4.595, 4.605), (1, 26, 1, 29, 4.734, 4.744), (1, 30, 1, 31, 4.847, 4.857), (1, 31, 1, 32, 5.032, 5.042), (1, 36, 1, 37, 5.284, 5.294), (1, 37, 1, 38, 5.469, 5.479), (1, 42, 1, 43, 5.721, 5.731), (1, 43, 1, 44, 5.907, 5.917), (1, 48, 1, 49, 6.159, 6.169), (1, 49, 1, 50, 6.344, 6.354), (0, 51, 0, 52, 6.509, 6.627), ],

]
# visualize_schedule3(schedule_without_recalc, xpbd_task_name_map)
# visualize_schedule3(schedule_with_recalc, xpbd_task_name_map)
# visualize_schedule3(merged_schedule_without_recalc, xpbd_task_name_map)
# visualize_schedule3(merged_schedule_with_recalc, xpbd_task_name_map)


plt.show()
# visualize_schedule3([ # No Culculate Ranku
#     [(0, 69, 4294967295, 0.000, 0.000), (1, 0, 4294967295, 0.002, 0.075), (0, 3, 4294967295, 0.077, 0.218), (4, 57, 4294967295, 0.225, 0.524), (15, 8, 1, 0.526, 1.003), (15, 13, 0, 1.005, 1.948), (5, 62, 4294967295, 1.950, 2.195), (0, 65, 4294967295, 2.226, 2.370), (12, 67, 4294967295, 2.372, 3.845), (0, 68, 4294967295, 3.847, 3.848), (0, 2, 4294967295, 3.850, 3.873), (17, 4, 0, 3.875, 3.939), (16, 9, 2, 3.941, 4.013), (17, 10, 3, 4.015, 4.079), (16, 15, 7, 4.081, 4.153), (17, 16, 4, 4.155, 4.219), (16, 21, 5, 4.221, 4.293), (17, 22, 6, 4.295, 4.359), (16, 27, 10, 4.361, 4.433), (14, 42, 3, 4.495, 4.705), (14, 48, 5, 4.741, 4.951), (17, 40, 10, 4.979, 5.044), (16, 45, 11, 5.046, 5.118), (17, 46, 3, 5.124, 5.188), (16, 51, 3, 5.190, 5.262), (0, 52, 5, 5.444, 5.488), (0, 53, 4294967295, 5.490, 5.746)],
#     [(0, 54, 4294967295, 0.000, 0.038), (8, 55, 4294967295, 0.048, 0.059), (2, 56, 4294967295, 0.069, 0.080), (13, 1, 4294967295, 0.090, 0.103), (9, 60, 4294967295, 0.113, 0.117), (3, 61, 4294967295, 0.127, 0.139), (15, 7, 0, 0.438, 0.610), (14, 5, 0, 0.620, 0.674), (14, 6, 0, 0.684, 0.723), (6, 58, 4294967295, 0.744, 1.765), (10, 59, 4294967295, 1.775, 2.081), (15, 14, 1, 2.091, 2.219), (15, 19, 0, 2.229, 2.401), (7, 63, 4294967295, 2.415, 2.550), (15, 20, 0, 2.560, 2.687), (11, 64, 4294967295, 2.697, 2.782), (15, 25, 0, 2.792, 2.964), (15, 26, 0, 2.974, 3.101), (14, 11, 0, 3.111, 3.165), (14, 12, 0, 3.175, 3.214), (15, 31, 0, 3.224, 3.396), (14, 17, 0, 3.406, 3.460), (14, 18, 0, 3.470, 3.510), (15, 32, 0, 3.520, 3.647), (0, 66, 4294967295, 3.657, 3.691), (14, 23, 2, 3.701, 3.755), (14, 24, 3, 3.765, 3.804), (15, 37, 4, 3.814, 3.986), (14, 29, 5, 3.996, 4.050), (14, 30, 6, 4.060, 4.099), (15, 38, 8, 4.109, 4.237), (14, 35, 2, 4.247, 4.301), (14, 36, 3, 4.311, 4.350), (15, 43, 9, 4.360, 4.532), (14, 41, 5, 4.542, 4.596), (15, 44, 6, 4.606, 4.734), (17, 28, 10, 4.744, 4.765), (16, 33, 10, 4.775, 4.803), (17, 34, 10, 4.813, 4.834), (16, 39, 11, 4.844, 4.873), (14, 47, 3, 4.925, 4.979), (15, 49, 12, 4.989, 5.161), (15, 50, 5, 5.171, 5.299), (0, 70, 4294967295, 5.746, 5.746)],
#     [(1, 32, 0, 4, 3.647, 3.875), (1, 23, 0, 9, 3.755, 3.941), (1, 24, 0, 10, 3.804, 4.015), (1, 6, 0, 13, 0.723, 1.005), (0, 8, 1, 14, 1.003, 2.091), (1, 37, 0, 16, 3.986, 4.155), (0, 13, 1, 19, 1.948, 2.229), (1, 29, 0, 21, 4.050, 4.221), (1, 30, 0, 22, 4.099, 4.295), (0, 27, 1, 28, 4.433, 4.744), (0, 4, 1, 35, 3.939, 4.247), (0, 9, 1, 35, 4.013, 4.247), (0, 10, 1, 36, 4.079, 4.311), (1, 34, 0, 40, 4.834, 4.979), (0, 15, 1, 41, 4.153, 4.542), (0, 16, 1, 41, 4.219, 4.542), (0, 21, 1, 41, 4.293, 4.542), (1, 36, 0, 42, 4.350, 4.495), (0, 22, 1, 44, 4.359, 4.606), (1, 39, 0, 45, 4.873, 5.046), (1, 47, 0, 46, 4.979, 5.124), (0, 42, 1, 47, 4.705, 4.925), (1, 41, 0, 48, 4.596, 4.741), (0, 48, 1, 50, 4.951, 5.171), (1, 50, 0, 52, 5.299, 5.444), ],
#     [(1, 6, 1, 14, 0.723, 2.091), (0, 10, 0, 15, 4.079, 4.081), (1, 14, 1, 19, 2.219, 2.229), (1, 32, 1, 23, 3.647, 3.701), (1, 23, 1, 24, 3.755, 3.765), (0, 22, 0, 27, 4.359, 4.361), (1, 44, 1, 28, 4.734, 4.744), (1, 37, 1, 29, 3.986, 3.996), (1, 29, 1, 30, 4.050, 4.060), (1, 38, 1, 35, 4.237, 4.247), (1, 35, 1, 36, 4.301, 4.311), (1, 24, 1, 37, 3.804, 3.814), (1, 30, 1, 38, 4.099, 4.109), (1, 34, 1, 39, 4.834, 4.844), (1, 43, 1, 41, 4.532, 4.542), (1, 36, 1, 43, 4.350, 4.360), (1, 41, 1, 44, 4.596, 4.606), (0, 40, 0, 45, 5.044, 5.046), (0, 45, 0, 46, 5.118, 5.124), (1, 39, 1, 47, 4.873, 4.925), (1, 47, 1, 49, 4.979, 4.989), (1, 49, 1, 50, 5.161, 5.171), (0, 51, 0, 52, 5.262, 5.444), ],

# ])
# visualize_schedule3([ # VBD 8 iters
#     [(0, 98, 4294967295, 0.000, 0.000), (9, 92, 4294967295, 0.002, 0.006), (1, 0, 4294967295, 0.008, 0.065), (3, 93, 4294967295, 0.159, 0.171), (4, 88, 4294967295, 0.200, 0.436), (5, 94, 4294967295, 0.438, 0.468), (7, 95, 4294967295, 0.470, 1.739), (20, 9, 1, 3.025, 5.938), (23, 12, 0, 5.940, 6.316), (19, 18, 2, 6.318, 9.483), (23, 22, 0, 9.485, 9.861), (19, 28, 5, 9.863, 13.028), (23, 32, 0, 13.030, 13.406), (18, 37, 6, 13.408, 16.699), (23, 42, 0, 16.701, 17.077), (18, 47, 8, 17.079, 20.370), (23, 52, 0, 20.372, 20.748), (18, 57, 10, 20.750, 24.041), (23, 62, 0, 24.043, 24.419), (18, 67, 12, 24.421, 27.712), (23, 72, 0, 27.714, 28.090), (18, 77, 14, 28.092, 31.383), (23, 82, 0, 31.385, 31.761), (0, 99, 4294967295, 32.809, 32.809)],
#     [(0, 85, 4294967295, 0.000, 0.014), (8, 86, 4294967295, 0.024, 0.034), (2, 87, 4294967295, 0.044, 0.055), (0, 2, 4294967295, 0.285, 0.311), (6, 89, 4294967295, 0.656, 2.129), (10, 90, 4294967295, 2.139, 2.636), (11, 96, 4294967295, 2.646, 2.713), (0, 91, 4294967295, 2.723, 2.804), (0, 97, 4294967295, 2.814, 2.851), (0, 1, 4294967295, 2.861, 2.880), (14, 3, 0, 2.890, 3.435), (15, 4, 0, 3.445, 3.956), (16, 5, 0, 3.966, 4.499), (17, 6, 0, 4.509, 5.012), (18, 7, 0, 5.022, 5.525), (19, 8, 2, 5.535, 6.035), (21, 10, 3, 6.045, 6.414), (22, 11, 1, 6.424, 6.644), (14, 13, 0, 6.654, 7.198), (15, 14, 0, 7.208, 7.720), (16, 15, 0, 7.730, 8.263), (17, 16, 0, 8.273, 8.776), (18, 17, 0, 8.786, 9.289), (20, 19, 4, 9.299, 9.761), (21, 20, 2, 9.771, 10.141), (22, 21, 0, 10.151, 10.371), (14, 23, 0, 10.381, 10.925), (15, 24, 0, 10.935, 11.447), (16, 25, 0, 11.457, 11.990), (17, 26, 0, 12.000, 12.502), (18, 27, 6, 12.512, 13.015), (20, 29, 7, 13.025, 13.488), (21, 30, 5, 13.498, 13.867), (22, 31, 0, 13.877, 14.097), (14, 33, 0, 14.107, 14.651), (15, 34, 0, 14.661, 15.173), (16, 35, 0, 15.183, 15.716), (17, 36, 0, 15.726, 16.229), (19, 38, 8, 16.239, 16.739), (20, 39, 9, 16.749, 17.211), (21, 40, 6, 17.221, 17.590), (22, 41, 0, 17.600, 17.821), (14, 43, 0, 17.831, 18.375), (15, 44, 0, 18.385, 18.896), (16, 45, 0, 18.906, 19.440), (17, 46, 0, 19.450, 19.952), (19, 48, 10, 19.962, 20.462), (20, 49, 11, 20.472, 20.935), (21, 50, 8, 20.945, 21.314), (22, 51, 0, 21.324, 21.544), (14, 53, 0, 21.554, 22.098), (15, 54, 0, 22.108, 22.620), (16, 55, 0, 22.630, 23.163), (17, 56, 0, 23.173, 23.675), (19, 58, 12, 23.685, 24.185), (20, 59, 13, 24.195, 24.658), (21, 60, 0, 24.668, 25.037), (22, 61, 0, 25.047, 25.267), (14, 63, 0, 25.277, 25.821), (15, 64, 0, 25.831, 26.343), (16, 65, 0, 26.353, 26.886), (17, 66, 0, 26.896, 27.399), (19, 68, 14, 27.409, 27.909), (20, 69, 15, 27.919, 28.381), (21, 70, 0, 28.391, 28.760), (22, 71, 0, 28.770, 28.990), (14, 73, 0, 29.000, 29.545), (15, 74, 0, 29.555, 30.066), (16, 75, 0, 30.076, 30.610), (17, 76, 0, 30.620, 31.122), (19, 78, 16, 31.132, 31.632), (20, 79, 14, 31.642, 32.105), (21, 80, 0, 32.115, 32.484), (22, 81, 0, 32.494, 32.714), (0, 83, 0, 32.724, 32.732), (0, 84, 4294967295, 32.742, 32.809)],
#     [(0, 9, 1, 11, 5.938, 6.424), (1, 7, 0, 12, 5.525, 5.940), (0, 12, 1, 13, 6.316, 6.654), (1, 8, 0, 18, 6.035, 6.318), (0, 18, 1, 20, 9.483, 9.771), (0, 22, 1, 21, 9.861, 10.151), (1, 17, 0, 22, 9.289, 9.485), (0, 28, 1, 30, 13.028, 13.498), (0, 32, 1, 31, 13.406, 13.877), (1, 26, 0, 32, 12.502, 13.030), (1, 27, 0, 37, 13.015, 13.408), (0, 37, 1, 40, 16.699, 17.221), (0, 42, 1, 41, 17.077, 17.600), (1, 36, 0, 42, 16.229, 16.701), (1, 38, 0, 47, 16.739, 17.079), (0, 47, 1, 50, 20.370, 20.945), (0, 52, 1, 51, 20.748, 21.324), (1, 46, 0, 52, 19.952, 20.372), (1, 48, 0, 57, 20.462, 20.750), (0, 57, 1, 60, 24.041, 24.668), (0, 62, 1, 60, 24.419, 24.668), (1, 56, 0, 62, 23.675, 24.043), (1, 58, 0, 67, 24.185, 24.421), (0, 67, 1, 70, 27.712, 28.391), (0, 72, 1, 70, 28.090, 28.391), (1, 66, 0, 72, 27.399, 27.714), (1, 68, 0, 77, 27.909, 28.092), (0, 77, 1, 79, 31.383, 31.642), (0, 82, 1, 80, 31.761, 32.115), (1, 76, 0, 82, 31.122, 31.385), ],
#     [(1, 7, 1, 8, 5.525, 5.535), (1, 8, 1, 10, 6.035, 6.045), (1, 10, 1, 11, 6.414, 6.424), (1, 11, 1, 13, 6.644, 6.654), (1, 17, 1, 19, 9.289, 9.299), (1, 19, 1, 20, 9.761, 9.771), (1, 20, 1, 21, 10.141, 10.151), (1, 26, 1, 27, 12.502, 12.512), (0, 22, 0, 28, 9.861, 9.863), (1, 27, 1, 29, 13.015, 13.025), (1, 29, 1, 30, 13.488, 13.498), (1, 30, 1, 31, 13.867, 13.877), (1, 36, 1, 38, 16.229, 16.239), (1, 38, 1, 39, 16.739, 16.749), (1, 39, 1, 40, 17.211, 17.221), (1, 40, 1, 41, 17.590, 17.600), (1, 46, 1, 48, 19.952, 19.962), (1, 48, 1, 49, 20.462, 20.472), (1, 49, 1, 50, 20.935, 20.945), (1, 50, 1, 51, 21.314, 21.324), (1, 56, 1, 58, 23.675, 23.685), (1, 58, 1, 59, 24.185, 24.195), (1, 59, 1, 60, 24.658, 24.668), (1, 66, 1, 68, 27.399, 27.409), (1, 68, 1, 69, 27.909, 27.919), (1, 69, 1, 70, 28.381, 28.391), (1, 76, 1, 78, 31.122, 31.132), (1, 78, 1, 79, 31.632, 31.642), (1, 79, 1, 80, 32.105, 32.115), ],

# ], vbd_task_name_map)
visualize_schedule3([ # VBD 8 iters
    [(0, 14, 4294967295, 0.000, 0.000), (1, 0, 4294967295, 0.000, 0.100), (0, 1, 4294967295, 0.100, 0.200), (14, 2, 0, 0.200, 0.300), (15, 3, 1, 0.300, 0.400), (17, 5, 3, 0.400, 0.500), (19, 7, 2, 0.500, 0.600), (21, 9, 0, 0.600, 0.700), (23, 11, 1, 0.700, 0.800), (0, 12, 3, 0.800, 0.900), (0, 13, 4294967295, 0.900, 1.000), (0, 15, 4294967295, 1.000, 1.000)],
    [(16, 4, 2, 0.300, 0.400), (18, 6, 0, 0.400, 0.500), (20, 8, 1, 0.500, 0.600), (22, 10, 3, 0.600, 0.700)],
    [(0, 2, 1, 6, 0.300, 0.400), (1, 4, 0, 7, 0.400, 0.500), (0, 3, 1, 8, 0.400, 0.500), (1, 6, 0, 9, 0.500, 0.600), (0, 5, 1, 10, 0.500, 0.600), (1, 8, 0, 11, 0.600, 0.700), (1, 10, 0, 12, 0.700, 0.800), ],
    [(0, 2, 0, 3, 0.300, 0.300), (0, 3, 0, 5, 0.400, 0.400), (1, 4, 1, 6, 0.400, 0.400), (1, 6, 1, 8, 0.500, 0.500), (0, 7, 0, 9, 0.600, 0.600), (1, 8, 1, 10, 0.600, 0.600), (0, 9, 0, 11, 0.700, 0.700), (0, 11, 0, 12, 0.800, 0.800), ],

], vbd_task_name_map)




plt.show()
plt.ion()
